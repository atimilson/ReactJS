{"version":3,"sources":["services/api.js","pages/main/index.js","pages/product/index.js","routes.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","Main","state","products","productInfo","page","loadProducts","a","get","response","data","docs","setState","prevPage","pageNumber","nextPage","pages","this","className","map","product","key","_id","title","description","to","disabled","onClick","Component","Product","id","props","match","params","href","url","Routes","exact","path","component","Header","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2VAIeA,E,OAFHC,EAAMC,OAAO,CAACC,QAAS,8CCIdC,G,kNAClBC,MAAQ,CACJC,SAAU,GACVC,YAAc,GACdC,KAAO,G,EAMVC,a,sBAAe,gDAAAC,EAAA,6DAAOF,EAAP,+BAAc,EAAd,SACWR,EAAIW,IAAJ,yBAA0BH,IADrC,OACNI,EADM,SAGqBA,EAASC,KAAlCC,EAHI,EAGJA,KAASP,EAHL,wBAKZ,EAAKQ,SAAS,CAAET,SAAUQ,EAAMP,cAAaC,SALjC,2C,EAQfQ,SAAW,WAAO,IACPR,EAAQ,EAAKH,MAAbG,KAEP,GAAa,IAATA,EAAJ,CAEA,IAAMS,EAAaT,EAAO,EAE1B,EAAKC,aAAaQ,K,EAGtBC,SAAW,WAAO,IAAD,EACgB,EAAKb,MAA3BG,EADM,EACNA,KAEP,GAAGA,IAHU,EACCD,YAEUY,MAAxB,CAEA,IAAMF,EAAaT,EAAO,EAE1B,EAAKC,aAAaQ,K,kEA3BlBG,KAAKX,iB,+BA8BA,IAAD,EACkCW,KAAKf,MAApCC,EADH,EACGA,SAAUE,EADb,EACaA,KAAMD,EADnB,EACmBA,YAEvB,OACI,yBAAKc,UAAU,gBACVf,EAASgB,KAAI,SAAAC,GAAO,OACjB,6BAASC,IAAKD,EAAQE,KAClB,gCAASF,EAAQG,OACjB,2BAAIH,EAAQI,aACZ,kBAAC,IAAD,CAAMC,GAAE,oBAAeL,EAAQE,MAA/B,eAGR,yBAAKJ,UAAU,WACV,4BAAQQ,SAAmB,IAATrB,EAAYsB,QAASV,KAAKJ,UAA5C,YACA,4BAAQa,SAAUrB,IAASD,EAAYY,MAAOW,QAASV,KAAKF,UAA5D,iB,GApDaa,cCDbC,G,kNACjB3B,MAAQ,CACJkB,QAAQ,I,2LAGDU,EAAMb,KAAKc,MAAMC,MAAMC,OAAvBH,G,SAEgBjC,EAAIW,IAAJ,oBAAqBsB,I,OAAtCrB,E,OAENQ,KAAKL,SAAS,CAACQ,QAASX,EAASC,O,qIAE3B,IACEU,EAAYH,KAAKf,MAAjBkB,QACR,OACI,yBAAKF,UAAU,gBACX,4BAAKE,EAAQG,OACb,2BAAIH,EAAQI,aACZ,oCACU,uBAAGU,KAAMd,EAAQe,KAAMf,EAAQe,W,GAlBpBP,cCYtBQ,EATA,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtC,IACjC,kBAAC,IAAD,CAAOqC,KAAK,gBAAgBC,UAAWV,OCNhCW,G,MAJD,kBACX,4BAAQV,GAAG,eAAX,YCUYW,G,MANH,kBACV,yBAAKvB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEgBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCbNc,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ced39bf8.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({baseURL: 'https://rocketseat-node.herokuapp.com/api'}) ;\r\n\r\nexport default api;","import React, {Component} from 'react';\r\nimport api from '../../services/api';\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport './styles.css'\r\n\r\nexport default class Main extends Component{\r\n   state = {\r\n       products: [],\r\n       productInfo : {},\r\n       page : 1,\r\n   }\r\n\r\n    componentDidMount(){\r\n        this.loadProducts();\r\n    }\r\n    loadProducts = async (page = 1) => {\r\n       const response = await api.get(`/products?page=${page}`);\r\n\r\n       const { docs, ...productInfo } = response.data;\r\n\r\n       this.setState({ products: docs, productInfo, page});\r\n    };\r\n\r\n    prevPage = () => {\r\n        const {page} = this.state;\r\n\r\n        if (page === 1) return;\r\n\r\n        const pageNumber = page - 1;\r\n\r\n        this.loadProducts(pageNumber);\r\n    }\r\n\r\n    nextPage = () => {\r\n        const {page , productInfo} = this.state;\r\n\r\n        if(page === productInfo.pages) return;\r\n\r\n        const pageNumber = page + 1;\r\n\r\n        this.loadProducts(pageNumber);\r\n    }\r\n\r\n    render(){\r\n        const {products, page, productInfo} = this.state;\r\n\r\n        return(\r\n            <div className=\"product-list\">\r\n                {products.map(product => (\r\n                    <article key={product._id}>\r\n                        <strong>{product.title}</strong>\r\n                        <p>{product.description}</p>\r\n                        <Link to={`/products/${product._id}`}>Acessar</Link>\r\n                    </article>\r\n                ))}\r\n                <div className=\"actions\">\r\n                     <button disabled={page === 1} onClick={this.prevPage}>Anterior</button>\r\n                     <button disabled={page === productInfo.pages} onClick={this.nextPage}>Proxima</button>   \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport api from '../../services/api';\r\n\r\nimport './styles.css'\r\n\r\nexport default class Product extends Component{\r\n    state = {\r\n        product:{},\r\n    }\r\n    async componentDidMount(){\r\n        const {id} = this.props.match.params;\r\n\r\n        const response = await api.get(`/products/${id}`);\r\n\r\n        this.setState({product: response.data});\r\n    }\r\n    render() {\r\n        const { product } = this.state;\r\n        return(\r\n            <div className=\"product-info\">\r\n                <h1>{product.title}</h1>\r\n                <p>{product.description}</p>\r\n                <p>\r\n                    URL : <a href={product.url}>{product.url}</a>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\n\r\nimport Main from './pages/main';\r\nimport Product from './pages/product'\r\n\r\n\r\nconst Routes = () => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Main} />\r\n        <Route path=\"/products/:id\" component={Product} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default Routes;","import React from 'react';\r\nimport './styles.css';\r\nconst Header =() => (\r\n   <header id=\"main-header\">JSHunt</header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport Routes from './routes';\r\n\r\nimport Header from './components/Header';\r\n\r\nimport './style.css';\r\n\r\nconst App = ()=> (\r\n  <div className=\"App\">\r\n    <Header />\r\n    <Routes />\r\n  </div>\r\n);\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}